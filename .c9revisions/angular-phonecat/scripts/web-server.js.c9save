{"ts":1373481000395,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"#!/usr/bin/env node\n\nvar util = require('util'),\n    http = require('http'),\n    fs = require('fs'),\n    url = require('url'),\n    events = require('events');\n\nvar DEFAULT_PORT = 8000;\n\nfunction main(argv) {\n  new HttpServer({\n    'GET': createServlet(StaticServlet),\n    'HEAD': createServlet(StaticServlet)\n  }).start(Number(argv[2]) || DEFAULT_PORT);\n}\n\nfunction escapeHtml(value) {\n  return value.toString().\n    replace('<', '&lt;').\n    replace('>', '&gt;').\n    replace('\"', '&quot;');\n}\n\nfunction createServlet(Class) {\n  var servlet = new Class();\n  return servlet.handleRequest.bind(servlet);\n}\n\n/**\n * An Http server implementation that uses a map of methods to decide\n * action routing.\n *\n * @param {Object} Map of method => Handler function\n */\nfunction HttpServer(handlers) {\n  this.handlers = handlers;\n  this.server = http.createServer(this.handleRequest_.bind(this));\n}\n\nHttpServer.prototype.start = function(port) {\n  this.port = port;\n  this.server.listen(port);\n  util.puts('Http Server running at http://localhost:' + port + '/');\n};\n\nHttpServer.prototype.parseUrl_ = function(urlString) {\n  var parsed = url.parse(urlString);\n  parsed.pathname = url.resolve('/', parsed.pathname);\n  return url.parse(url.format(parsed), true);\n};\n\nHttpServer.prototype.handleRequest_ = function(req, res) {\n  var logEntry = req.method + ' ' + req.url;\n  if (req.headers['user-agent']) {\n    logEntry += ' ' + req.headers['user-agent'];\n  }\n  util.puts(logEntry);\n  req.url = this.parseUrl_(req.url);\n  var handler = this.handlers[req.method];\n  if (!handler) {\n    res.writeHead(501);\n    res.end();\n  } else {\n    handler.call(this, req, res);\n  }\n};\n\n/**\n * Handles static content.\n */\nfunction StaticServlet() {}\n\nStaticServlet.MimeMap = {\n  'txt': 'text/plain',\n  'html': 'text/html',\n  'css': 'text/css',\n  'xml': 'application/xml',\n  'json': 'application/json',\n  'js': 'application/javascript',\n  'jpg': 'image/jpeg',\n  'jpeg': 'image/jpeg',\n  'gif': 'image/gif',\n  'png': 'image/png',\nÂ  'svg': 'image/svg+xml'\n};\n\nStaticServlet.prototype.handleRequest = function(req, res) {\n  var self = this;\n  var path = ('./' + req.url.pathname).replace('//','/').replace(/%(..)/g, function(match, hex){\n    return String.fromCharCode(parseInt(hex, 16));\n  });\n  var parts = path.split('/');\n  if (parts[parts.length-1].charAt(0) === '.')\n    return self.sendForbidden_(req, res, path);\n  fs.stat(path, function(err, stat) {\n    if (err)\n      return self.sendMissing_(req, res, path);\n    if (stat.isDirectory())\n      return self.sendDirectory_(req, res, path);\n    return self.sendFile_(req, res, path);\n  });\n}\n\nStaticServlet.prototype.sendError_ = function(req, res, error) {\n  res.writeHead(500, {\n      'Content-Type': 'text/html'\n  });\n  res.write('<!doctype html>\\n');\n  res.write('<title>Internal Server Error</title>\\n');\n  res.write('<h1>Internal Server Error</h1>');\n  res.write('<pre>' + escapeHtml(util.inspect(error)) + '</pre>');\n  util.puts('500 Internal Server Error');\n  util.puts(util.inspect(error));\n};\n\nStaticServlet.prototype.sendMissing_ = function(req, res, path) {\n  path = path.substring(1);\n  res.writeHead(404, {\n      'Content-Type': 'text/html'\n  });\n  res.write('<!doctype html>\\n');\n  res.write('<title>404 Not Found</title>\\n');\n  res.write('<h1>Not Found</h1>');\n  res.write(\n    '<p>The requested URL ' +\n    escapeHtml(path) +\n    ' was not found on this server.</p>'\n  );\n  res.end();\n  util.puts('404 Not Found: ' + path);\n};\n\nStaticServlet.prototype.sendForbidden_ = function(req, res, path) {\n  path = path.substring(1);\n  res.writeHead(403, {\n      'Content-Type': 'text/html'\n  });\n  res.write('<!doctype html>\\n');\n  res.write('<title>403 Forbidden</title>\\n');\n  res.write('<h1>Forbidden</h1>');\n  res.write(\n    '<p>You do not have permission to access ' +\n    escapeHtml(path) + ' on this server.</p>'\n  );\n  res.end();\n  util.puts('403 Forbidden: ' + path);\n};\n\nStaticServlet.prototype.sendRedirect_ = function(req, res, redirectUrl) {\n  res.writeHead(301, {\n      'Content-Type': 'text/html',\n      'Location': redirectUrl\n  });\n  res.write('<!doctype html>\\n');\n  res.write('<title>301 Moved Permanently</title>\\n');\n  res.write('<h1>Moved Permanently</h1>');\n  res.write(\n    '<p>The document has moved <a href=\"' +\n    redirectUrl +\n    '\">here</a>.</p>'\n  );\n  res.end();\n  util.puts('301 Moved Permanently: ' + redirectUrl);\n};\n\nStaticServlet.prototype.sendFile_ = function(req, res, path) {\n  var self = this;\n  var file = fs.createReadStream(path);\n  res.writeHead(200, {\n    'Content-Type': StaticServlet.\n      MimeMap[path.split('.').pop()] || 'text/plain'\n  });\n  if (req.method === 'HEAD') {\n    res.end();\n  } else {\n    file.on('data', res.write.bind(res));\n    file.on('close', function() {\n      res.end();\n    });\n    file.on('error', function(error) {\n      self.sendError_(req, res, error);\n    });\n  }\n};\n\nStaticServlet.prototype.sendDirectory_ = function(req, res, path) {\n  var self = this;\n  if (path.match(/[^\\/]$/)) {\n    req.url.pathname += '/';\n    var redirectUrl = url.format(url.parse(url.format(req.url)));\n    return self.sendRedirect_(req, res, redirectUrl);\n  }\n  fs.readdir(path, function(err, files) {\n    if (err)\n      return self.sendError_(req, res, error);\n\n    if (!files.length)\n      return self.writeDirectoryIndex_(req, res, path, []);\n\n    var remaining = files.length;\n    files.forEach(function(fileName, index) {\n      fs.stat(path + '/' + fileName, function(err, stat) {\n        if (err)\n          return self.sendError_(req, res, err);\n        if (stat.isDirectory()) {\n          files[index] = fileName + '/';\n        }\n        if (!(--remaining))\n          return self.writeDirectoryIndex_(req, res, path, files);\n      });\n    });\n  });\n};\n\nStaticServlet.prototype.writeDirectoryIndex_ = function(req, res, path, files) {\n  path = path.substring(1);\n  res.writeHead(200, {\n    'Content-Type': 'text/html'\n  });\n  if (req.method === 'HEAD') {\n    res.end();\n    return;\n  }\n  res.write('<!doctype html>\\n');\n  res.write('<title>' + escapeHtml(path) + '</title>\\n');\n  res.write('<style>\\n');\n  res.write('  ol { list-style-type: none; font-size: 1.2em; }\\n');\n  res.write('</style>\\n');\n  res.write('<h1>Directory: ' + escapeHtml(path) + '</h1>');\n  res.write('<ol>');\n  files.forEach(function(fileName) {\n    if (fileName.charAt(0) !== '.') {\n      res.write('<li><a href=\"' +\n        escapeHtml(fileName) + '\">' +\n        escapeHtml(fileName) + '</a></li>');\n    }\n  });\n  res.write('</ol>');\n  res.end();\n};\n\n// Must be last,\nmain(process.argv);\n"]],"start1":0,"start2":0,"length1":0,"length2":6555}]],"length":6555}
{"contributors":[],"silentsave":false,"ts":1373481131031,"patch":[[{"diffs":[[0,"T = "],[-1,"8000"],[1,"process.env.PORT"],[0,";\n\nf"]],"start1":175,"start2":175,"length1":12,"length2":24}]],"length":6567,"saved":false}
{"ts":1373481192466,"patch":[[{"diffs":[[0,"nv.PORT;"],[1,"\nvar IP = proce"],[0,"\n\nfuncti"]],"start1":188,"start2":188,"length1":16,"length2":31}]],"length":6582,"saved":false}
{"ts":1373481238442,"patch":[[{"diffs":[[0," = proce"],[1,"ss.env.IP;"],[0,"\n\nfuncti"]],"start1":203,"start2":203,"length1":16,"length2":26},{"diffs":[[0,"p://"],[-1,"localhost"],[1,"'+ip+'"],[0,":' +"]],"start1":1059,"start2":1059,"length1":17,"length2":14}]],"length":6589,"saved":false}
{"ts":1373481255287,"patch":[[{"diffs":[[0,"RT;\nvar "],[1,"DEFAULT_"],[0,"IP = pro"]],"start1":193,"start2":193,"length1":16,"length2":24},{"diffs":[[0,"ttp://'+"],[-1,"ip"],[1,"DEFAULT_IP"],[0,"+':' + p"]],"start1":1065,"start2":1065,"length1":18,"length2":26}]],"length":6605,"saved":false}
{"ts":1373481641005,"patch":[[{"diffs":[[0,"p://"],[-1,"'+DEFAULT_IP+'"],[1,"localhost"],[0,":' +"]],"start1":1067,"start2":1067,"length1":22,"length2":17}]],"length":6600,"saved":false}
